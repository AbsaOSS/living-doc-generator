name: "Static analysis & tests"

on:
  push:
    branches: [ "master" ]
  pull_request:

jobs:
  analysis:
    runs-on: ubuntu-latest
    name: Pylint Analysis
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.1.5

      - name: Set up Python
        uses: actions/setup-python@v5.1.0
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          pip install -r requirements.txt

      - name: Check code format with Black
        id: check-format
        run: |
          black --check $(git ls-files '*.py')

      - name: Analyze code with Pylint
        id: analyze-code
        run: |
          pylint_score=$(pylint $(git ls-files '*.py')| grep 'rated at' | awk '{print $7}' | cut -d'/' -f1)
          echo "PYLINT_SCORE=$pylint_score" >> $GITHUB_ENV

      - name: Check Pylint score
        run: |
          if (( $(echo "$PYLINT_SCORE < 9.5" | bc -l) )); then
            echo "Failure: Pylint score is below 9.5 (project score: $PYLINT_SCORE)."
            exit 1
          else
            echo "Success: Pylint score is above 9.5 (project score: $PYLINT_SCORE)."
          fi

  code-format-check:
    runs-on: ubuntu-latest
    name: Black Format Check
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.1.5

      - name: Set up Python
        uses: actions/setup-python@v5.1.0
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          pip install -r requirements.txt

      - name: Check code format with Black
        id: check-format
        run: |
          black --check $(git ls-files '*.py')

  python-tests:
    runs-on: ubuntu-latest
    name: Python tests
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.1.5

      - name: Set up Python
        uses: actions/setup-python@v5.1.0
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install coverage pytest

      - name: Run tests
        run: coverage run --source='similarity,column2Vec' -m pytest ./tests

#      - name: Show coverage
#        run: coverage report -m

#      - name: Create coverage file
#        run: coverage xml

#      - name: Get Cover
#        uses: orgoro/coverage@v3.1
#        with:
#          coverageFile: coverage.xml
#          token: ${{ secrets.GITHUB_TOKEN }}
#          thresholdAll: 0.7
#          thresholdNew: 0.9
